import os
import sys
import time
import protoparser
import protoobjects
import utils

INDENT = "  "

def indent(count): return count * INDENT

def get_enums(msg, enums):
    for field in msg.fields:
        obj = field.type
        if obj.sup_type == protoobjects.ENUM:
            if not obj in enums:
                enums.append(obj)

def print_doc(file, field, count):
    if field.doc:
        file.write("%s%s" % (indent(count), "/**\n"))
        for line in field.doc_lines:
            file.write("%s%s%s\n" % (indent(count), "  * ", line))
        file.write(indent(count) + "  */\n")

def print_enum(file, namespace, enum):
    file.write("%s.%s =\n" % (namespace, enum.name))
    file.write("{\n")
    count = 1
    for field in enum.fields:
        print_doc(file, field, count)
        file.write("%s%s: \"%s\",\n" % (indent(count), field.key, field.name))
    file.write("};\n\n")
    for field in enum.fields:
        print_doc(file, field, 0)
        file.write("%s.%s.%s = %s;\n" % (namespace, enum.name, field.name, field.key))
    file.write("\n")

def print_message(file, namespace, message):
    count = 0
    file.write("%s.%s = function(arr)\n" % (namespace, message.name))
    file.write("{\n")
    count += 1
    for index, field in enumerate(message.fields):
        print_doc(file, field, count)
        if field.type.sup_type == protoobjects.MESSAGE:
            if field.q == "repeated":
                args = indent(count), field.name, index
                file.write("%sthis.%s = (arr[%s] || []).map(function(item)\n" % args)
                file.write("%s{\n" % indent(count))
                args = indent(count + 1), namespace, field.type.name
                file.write("%sreturn new %s.%s(item);\n" % args)
                file.write("%s});\n" % indent(count))
            else:
                args = indent(count), field.name, index, namespace, field.type.name, index
                file.write("%sthis.%s = arr[%s] ? new %s.%s(arr[%s]) : null;\n" % args)
        else:
            file.write("%sthis.%s = arr[%s];\n" % (indent(count), field.name, index))

    file.write("};\n\n")

def print_js_class(dest, service, command_or_event, message):
    service_name = service.name
    version = service.options.version.value.strip("\"")
    file_name = "%s.%s.responses.%s.js" % (service_name.lower(), version, command_or_event.name.lower())
    with open(os.path.join(dest, file_name), "wb") as file:
        file.write("// Autogenerated by hobby\n")
        file.write("window.cls || (window.cls = {});\n")
        file.write("cls.%s || (cls.%s = {});\n" % (service_name, service_name))
        namespace = "cls.%s[\"%s\"]" % (service_name, version)
        file.write("%s || (%s = {});\n\n" % (namespace, namespace))
        print_message(file, namespace, message)
        enums = []
        get_enums(message, enums)
        for sub_msg in message.get_sub_messages():
            print_message(file, namespace, sub_msg)
            get_enums(sub_msg, enums)
        for enum in enums:
            print_enum(file, namespace, enum)

def print_js_classes(proto_path, dest):
    with open(proto_path, "rb") as proto_file:
        global_scope = protoparser.parse(proto_file.read())
        for c in global_scope.service.commands:
            print_js_class(dest, global_scope.service, c, c.response_arg)
        for e in global_scope.service.events:
            print_js_class(dest, global_scope.service, e, e.response_arg)

def js_classes(args):
    if not os.path.exists(args.dest): os.mkdir(args.dest)
    if os.path.isfile(args.src):
        print_js_classes(args.src, args.dest)
    elif os.path.isdir(args.src):
        for path in utils.get_proto_files(args.src):
            print_js_classes(path, args.dest)

def setup_subparser(subparsers, config):
    subp = subparsers.add_parser("js-classes", help="Create JavScript classes for the STP messages.")
    subp.add_argument("src", nargs="?", default=".", help="""proto file or directory (default: %(default)s)).""")
    subp.add_argument("dest", nargs="?",  default="js-classes", help="the destination directory (default: %(default)s)).")
    subp.set_defaults(func=js_classes)
